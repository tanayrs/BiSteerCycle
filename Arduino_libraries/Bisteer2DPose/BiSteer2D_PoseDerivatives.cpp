//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: Copy_of_BiSteer2D_PoseDerivatives.cpp
//
// MATLAB Coder version            : 5.5
// C/C++ source code generated on  : 16-Jun-2023 17:36:26
//

// Include Files
#include "BiSteer2D_PoseDerivatives.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  //if (std::isnan(u0) || std::isnan(u1)) {
  //  y = rtNaNF;
  //} else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::pow(u0, u1);
    } else {
      y = std::pow(u0, u1);
    }
  //}
  return y;
}

//
// BiSteer2D_PoseDerivatives
//     [X_DOT,Y_DOT,PSI_DOT,Vr_dot] =
//     BiSteer2D_PoseDerivatives(Ip,Tf,Tr,Vr,delF,delR,delF_dot,delR_dot,lF,lR,M,PSI)
//
// Arguments    : float Ip
//                double Vr
//                double delF
//                double delR
//                double delF_dot
//                double delR_dot
//                float lF
//                float lR
//                float m
// Return Type  : float
//
float BiSteer2D_PoseDerivatives(float Ip, double Vr, double delF,
                                        double delR, double delF_dot,
                                        double delR_dot, float lF, float lR,
                                        float m)
{
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t2;
  double t3;
  double t4;
  double t5;
  double t8;
  double t9;
  float Vr_dot_tmp;
  float b_Vr_dot_tmp;
  float c_Vr_dot_tmp;
  float d_Vr_dot_tmp;
  float e_Vr_dot_tmp;
  float f_Vr_dot_tmp;
  float g_Vr_dot_tmp;
  float h_Vr_dot_tmp;
  float i_Vr_dot_tmp;
  float j_Vr_dot_tmp;
  float t11;
  //     This function was generated by the Symbolic Math Toolbox version 9.3.
  //     07-Jun-2023 06:33:15
  t2 = std::cos(delF);
  t3 = std::cos(delR);
  t4 = std::sin(delF);
  t5 = std::sin(delR);
  //  t6 = delR+psi;
  //  t7 = lF+lR;
  t8 = delF * 2.0;
  t9 = delR * 2.0;
  t11 = lR * lR;
  //  t17 = -delR;
  t12 = std::cos(t8);
  t13 = std::cos(t9);
  t14 = t2 * t2;
  t15 = rt_powd_snf(t2, 3.0);
  t16 = t3 * t3;
  //  t20 = delF+t17;
  //  t21 = 1.0./t7;
  //  t22 = sin(t20);
  //  x_dot = Vr.*cos(t6)-Vr.*lR.*t19.*t21.*t22.*sin(psi);
  //  if nargout > 1
  //      y_dot = Vr.*sin(t6)+Vr.*lR.*t19.*t21.*t22.*cos(psi);
  //  end
  //  if nargout > 2
  //      psi_dot = Vr.*t19.*t21.*t22;
  //  end
  //  if nargout > 3
  t8 = std::cos(t8 - t9);
  Vr_dot_tmp = Ip * static_cast<float>(Vr);
  b_Vr_dot_tmp = Vr_dot_tmp * static_cast<float>(delF_dot);
  Vr_dot_tmp *= static_cast<float>(delR_dot);
  c_Vr_dot_tmp = Vr_dot_tmp * static_cast<float>(t4) * static_cast<float>(t14);
  d_Vr_dot_tmp = static_cast<float>(Vr * delR_dot);
  e_Vr_dot_tmp = static_cast<float>(Vr * delF_dot);
  f_Vr_dot_tmp = d_Vr_dot_tmp * lF * lR * m;
  g_Vr_dot_tmp =
      f_Vr_dot_tmp * static_cast<float>(t4) * static_cast<float>(t14);
  h_Vr_dot_tmp = m * (lF * lF);
  i_Vr_dot_tmp = m * t11;
  j_Vr_dot_tmp = lF * lR * m;
  return static_cast<float>(1.0 / t2) *
         (((((((((((b_Vr_dot_tmp * static_cast<float>(t4) *
                        static_cast<float>(t16) -
                    c_Vr_dot_tmp) +
                   b_Vr_dot_tmp * static_cast<float>(t2) *
                       static_cast<float>(t3) * static_cast<float>(t5)) +
                  Vr_dot_tmp * static_cast<float>(t2) * static_cast<float>(t3) *
                      static_cast<float>(t5)) -
                 Vr_dot_tmp * static_cast<float>(t3) * static_cast<float>(t5) *
                     static_cast<float>(t15) * 2.0F) +
                c_Vr_dot_tmp * static_cast<float>(t16) * 2.0F) -
               e_Vr_dot_tmp * m * static_cast<float>(t4) * t11 *
                   static_cast<float>(t16)) +
              g_Vr_dot_tmp) +
             d_Vr_dot_tmp * m * static_cast<float>(t2) *
                 static_cast<float>(t3) * static_cast<float>(t5) * t11) -
            e_Vr_dot_tmp * lF * lR * m * static_cast<float>(t2) *
                static_cast<float>(t3) * static_cast<float>(t5)) +
           f_Vr_dot_tmp * static_cast<float>(t3) * static_cast<float>(t5) *
               static_cast<float>(t15) * 2.0F) -
          g_Vr_dot_tmp * static_cast<float>(t16) * 2.0F) *
         2.0F /
         (((((((((Ip - Ip * static_cast<float>(t8)) + h_Vr_dot_tmp) +
                i_Vr_dot_tmp) +
               j_Vr_dot_tmp) +
              h_Vr_dot_tmp * static_cast<float>(t12)) +
             i_Vr_dot_tmp * static_cast<float>(t13)) +
            j_Vr_dot_tmp * static_cast<float>(t12)) +
           j_Vr_dot_tmp * static_cast<float>(t13)) +
          j_Vr_dot_tmp * static_cast<float>(t8));
  //  end
}

//
// File trailer for Copy_of_BiSteer2D_PoseDerivatives.cpp
//
// [EOF]
//
